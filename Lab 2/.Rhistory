}
f2 = function(in_data){
tree2 = get_tree(in_data)
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted2)
}
rng = function(in_data, mle){
data = data.frame(EX=in_data$EX, MET=in_data$MET)
n=dim(data)[1]
data$EX = rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
return(data)
}
get_tree = function(in.data){
return(tree(formula="EX~MET", data=in.data, control=tree.control))
}
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
calculate_residuals = function(predictions, observations){
return(observations-predictions)
}
get_residuals(mle){
fitted = predict(mle, data.sorted)
return(calculate_residuals(fitted, data.sorted$EX))
}
get_residuals(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(in.data){
return(tree(formula="EX~MET", data=in.data, control=tree.control))
}
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
calculate_residuals = function(predictions, observations){
return(observations-predictions)
}
get_residuals = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
f1 = function(in.data, ind){
data1 = in.data[ind,]
tree1 = get_tree(data1)
pruned.tree1 = get_pruned_tree(tree1, 3)
fitted1 = predict(pruned.tree1, newdata=data.sorted)
return(fitted1)
}
f2 = function(in.data){
tree2 = get_tree(in.data)
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted)
}
rng = function(in.data, mle){
data = data.frame(EX=in.data$EX, MET=in.data$MET)
n=dim(data)[1]
data$EX = rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
return(data)
}
plot(data.sorted$MET, data.sorted$EX, ylim=c(0,450), xlim=c(0,100)) # Some sort of regressional model, 2nd polynomial
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree)
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(in_data){
return(tree(formula="EX~MET", data=in_data, control=tree.control))
}
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
calculate_residuals = function(predictions, observations){
return(observations-predictions)
}
get_residuals = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
f1 = function(in_data, ind){
data1 = in_data[ind,]
tree1 = get_tree(data1)
pruned.tree1 = get_pruned_tree(tree1, 3)
fitted1 = predict(pruned.tree1, newdata=data.sorted)
return(fitted1)
}
f2 = function(in_data){
tree2 = get_tree(in_data)
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted)
}
rng = function(in_data, mle){
data = data.frame(EX=in_data$EX, MET=in_data$MET)
n=dim(data)[1]
data$EX = rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
return(data)
}
# Task 1
plot(data.sorted$MET, data.sorted$EX, ylim=c(0,450), xlim=c(0,100)) # Some sort of regressional model, 2nd polynomial
# Task 2
# Fit the model
fit.tree = get_tree(data.sorted)
cv.fit.tree = cv.tree(fit.tree)
fit.tree = get_tree(data.sorted)
cv.tree(fit.tree)
help(cv.tree)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(in.data){
return(tree(formula="EX~MET", data=in.data, control=tree.control))
}
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
calculate_residuals = function(predictions, observations){
return(observations-predictions)
}
get_residuals = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
f1 = function(in.data, ind){
data1 = in.data[ind,]
tree1 = get_tree(data1)
pruned.tree1 = get_pruned_tree(tree1, 3)
fitted1 = predict(pruned.tree1, newdata=data.sorted)
return(fitted1)
}
f2 = function(in.data){
tree2 = get_tree(in.data)
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted)
}
rng = function(in.data, mle){
data = data.frame(EX=in.data$EX, MET=in.data$MET)
n=dim(data)[1]
data$EX = rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
return(data)
}
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
get_residuals0 = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
get_residuals0 = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
fit.tree = get_tree(data.sorted)
get_tree = function(in.data){
return(tree(formula="EX~MET", data=in.data, control=tree.control))
}
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
fit.tree = get_tree(data.sorted)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree3 = function(in.data){
return(tree(formula="EX~MET", data=in.data, control=tree.control))
}
fit.tree = get_tree(data.sorted)
set.seed(12354)
fit.tree = get_tree3(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
library(tree)
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
fit.tree = tree(formula="EX~MET", data=in.data, control=tree.control)
set.seed(12354)
fit.tree = tree(formula="EX~MET", data=in.data, control=tree.control)
fit.tree = tree(formula="EX~MET", data=data.sorted, control=tree.control)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
fit.tree = get_tree(data.sorted)
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(in.data){
return(tree(formula="EX~MET", data=in.data, control=tree.control))
}
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
get_tree = function(in3.data){
return(tree(formula="EX~MET", data=in3.data, control=tree.control))
}
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
get_tree = function(in.data){
tree = tree(formula="EX~MET", data=in.data, control=tree.control)
return(tree)
}
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(in.data){
tree = tree(formula="EX~MET", data=in.data, control=tree.control)
return(tree)
}
fit.tree = get_tree(data.sorted)
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(in.data){
tree = tree(EX~MET, data=in.data, control=tree.control)
return(tree)
}
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
help(cv.tree)
fit.tree
get_tree
# Functions
get_tree = function(){
return(tree(EX~MET, data=data.sorted, control=tree.control))
}
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(){
return(tree(EX~MET, data=data.sorted, control=tree.control))
}
fit.tree = get_tree(data.sorted)
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
fit.tree = get_tree()
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
pruned.tree = get_pruned_tree(fit.tree, 3)
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
pruned.tree = get_pruned_tree(fit.tree, 3)
pruned.fitted = predict(pruned.tree, newdata=data.sorted)
plot(data.sorted$MET, pruned.fitted, col="blue")
points(data.sorted$MET, data.sorted$EX, col="red")
residuals = calculate_residuals(pruned.fitted, data.sorted$EX)
hist(residuals, main="Residuals", xlab="Residual value", col="forestgreen", xlim=c(-125, 125))
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(){
return(tree(EX~MET, data=data.sorted, control=tree.control))
}
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
calculate_residuals = function(predictions, observations){
return(observations-predictions)
}
get_residuals0 = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
f1 = function(in.data, ind){
data1 = in.data[ind,]
tree1 = get_tree(data1)
pruned.tree1 = get_pruned_tree(tree1, 3)
fitted1 = predict(pruned.tree1, newdata=data.sorted)
return(fitted1)
}
f2 = function(in.data){
tree2 = get_tree(in.data)
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted)
}
rng = function(in.data, mle){
data = data.frame(EX=in.data$EX, MET=in.data$MET)
n=dim(data)[1]
data$EX = rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
return(data)
}
# Task 1
plot(data.sorted$MET, data.sorted$EX, ylim=c(0,450), xlim=c(0,100)) # Some sort of regressional model, 2nd polynomial
# Task 2
# Fit the model
fit.tree = get_tree()
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
# Plot deviations
plot(cv.fit.tree$size, cv.fit.tree$dev, type="b", col="forestgreen") # 3 leaves seems to be optimal
plot(log(cv.fit.tree$k), cv.fit.tree$dev, type="b", col="forestgreen") # 4 leaves seems to be optimal
# Generate final tree, chosen 3 leaves
pruned.tree = get_pruned_tree(fit.tree, 3)
# Make predictions
pruned.fitted = predict(pruned.tree, newdata=data.sorted)
# Plot predictions and actual values
plot(data.sorted$MET, pruned.fitted, col="blue")
points(data.sorted$MET, data.sorted$EX, col="red")
# Plot the residuals
residuals = calculate_residuals(pruned.fitted, data.sorted$EX)
hist(residuals, main="Residuals", xlab="Residual value", col="forestgreen", xlim=c(-125, 125))
set.seed(12345)
w1 = boot(data.sorted, f1, R=50)
# Attachmed 2
library(tree)
library(boot)
dataframe = read.csv2("State.csv")
# Settings
data.sorted = dataframe[order(dataframe$MET),] # sorted data
n = dim(data.sorted)[1] # number of observations
tree.control = tree.control(n, minsize=8) # control
# Functions
get_tree = function(){
return(tree(EX~MET, data=data.sorted, control=tree.control))
}
get_pruned_tree = function(tree, leaves){
return(prune.tree(tree, best=leaves))
}
calculate_residuals = function(predictions, observations){
return(observations-predictions)
}
get_residuals0 = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
f1 = function(in.data, ind){
data1 = in.data[ind,]
tree1 = get_tree()
pruned.tree1 = get_pruned_tree(tree1, 3)
fitted1 = predict(pruned.tree1, newdata=data.sorted)
return(fitted1)
}
f2 = function(in.data){
tree2 = get_tree()
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted)
}
rng = function(in.data, mle){
data = data.frame(EX=in.data$EX, MET=in.data$MET)
n=dim(data)[1]
data$EX = rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
return(data)
}
# Task 1
plot(data.sorted$MET, data.sorted$EX, ylim=c(0,450), xlim=c(0,100)) # Some sort of regressional model, 2nd polynomial
# Task 2
# Fit the model
fit.tree = get_tree()
set.seed(12354)
cv.fit.tree = cv.tree(fit.tree, FUN=prune.tree)
# Plot deviations
plot(cv.fit.tree$size, cv.fit.tree$dev, type="b", col="forestgreen") # 3 leaves seems to be optimal
plot(log(cv.fit.tree$k), cv.fit.tree$dev, type="b", col="forestgreen") # 4 leaves seems to be optimal
# Generate final tree, chosen 3 leaves
pruned.tree = get_pruned_tree(fit.tree, 3)
# Make predictions
pruned.fitted = predict(pruned.tree, newdata=data.sorted)
# Plot predictions and actual values
plot(data.sorted$MET, pruned.fitted, col="blue")
points(data.sorted$MET, data.sorted$EX, col="red")
# Plot the residuals
residuals = calculate_residuals(pruned.fitted, data.sorted$EX)
hist(residuals, main="Residuals", xlab="Residual value", col="forestgreen", xlim=c(-125, 125))
set.seed(12345)
w1 = boot(data.sorted, f1, R=50)
hist(rowMeans(w1$t))
w1 = boot(data.sorted, f1, R=50)
w1
w$t
w1$t0
w1$t
hist(rowMeans(w1))
w1 = boot(data.sorted, f1, R=50)
hist(rowMeans(w1))
hist(w1)
w1 = boot(data.sorted, f1, R=50)
hist(w1)
w1
f1 = function(in.data, ind){
data1 = in.data[ind,]
tree1 = fit_tree(data1)
pruned.tree1 = get_pruned_tree(tree1, 3)
fitted1 = predict(pruned.tree1, newdata=data.sorted)
return(fitted1)
}
f2 = function(in.data){
tree2 = fit_tree(in.data)
pruned.tree2 = get_pruned_tree(tree2, 3)
fitted2 = predict(pruned.tree2, newdata=data.sorted)
return(fitted)
}
fit_tree = function(in.data){
return(tree(EX~MET, data=in.data, control=tree.control))
}
set.seed(12345)
w1 = boot(data.sorted, f1, R=50)
hist(w1)
w1
hist(w1$t)
set.seed(12345)
mle = pruned.tree
w2 = boot(data.sorted, statistic=f2, R=50, sim="parametric", mle=mle, ran.gen=rng, sim="parametric")
w2 = boot(data.sorted, statistic=f2, R=50, mle=mle, ran.gen=rng, sim="parametric")
get_residuals = function(mle){
fitted0 = predict(mle, data.sorted)
return(calculate_residuals(fitted0, data.sorted$EX))
}
w2 = boot(data.sorted, statistic=f2, R=50, mle=mle, ran.gen=rng, sim="parametric")
help("boot")
help(rnorm)
data = data.frame(EX=in.data$EX, MET=in.data$MET)
data = data.frame(EX=data.sorted$EX, MET=data.sorted$MET)
data
dim(data)[1]
get_residuals(pruned.data)
get_residuals(pruned.tree)
dim(pruned.tree)
dim(get_residuals(pruned.tree))
get_residuals(pruned.tree)
a = get_residuals(pruned.tree)
a
dim(a)
length(a)
get_residuals(pruned.tree)
get_residuals(pruned.tree)[1]
get_residuals(pruned.tree).values
get_residuals(pruned.tree)[,]
get_residuals(pruned.tree)[1,]
get_residuals(pruned.tree)[,1]
get_residuals(pruned.tree)[16]
type(a)
typeof(a)
class(a)
set.seed(12345)
mle = pruned.tree
w2 = boot(data.sorted, statistic=f2, R=50, mle=mle, ran.gen=rng, sim="parametric")
rnorm(n, predict(mle, newdata=data), sd(get_residuals(mle)))
predict(mle, newdata=data)

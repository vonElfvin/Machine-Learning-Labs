}
ROC
install.packages("kknn")
n = dim(dataframe)[1] # number of observations
set.seed(12345)
ids = sample(1:n, floor(n/2))
set.seed(12345)
ids = sample(1:n, floor(n/2))
help(legend)
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
library(MASS)
library(glmnet)
# Data
dataframe = read.csv("tecator.csv", dec=',')
dataframe = dataframe[-215,]
# Task 1 - Plot Protein vs. Moisture
protein = dataframe$Protein
moisture = dataframe$Moisture
plot(protein, moisture) # Plot of protein vs. moisture, linear approximation seems reasonable (normally distributed around a line)
# Task 2
# M1 = w0+w1*p+ε, where ε = N~(0, σ)
# M2 = w0+w1*p+w2*p²+ε, where ε=N~(0, σ)
# M3 = w0+w1*p+w2*p²+w3*p³+ε, where ε=N~(0, σ)
# etc.
# MSE criterion is appropriate to use since it minimizes the errors in our predicions (deviation of ε)
# Task 3 - Models for different polunomial terms of powers
n = dim(dataframe)[1] # number of observations
set.seed(12345)
ids = sample(1:n, floor(n/2))
training = dataframe[ids,] # training data
validation = dataframe[-ids,] # validation (test) data
#M = solve(t(X)%*%X)%*%t(X)%*%Y if I was to calculate it myself, did not work for higher polynomial terms of power in R
## Create the models (Moisture vs. Protein) for the different terms of power
M1 = lm(Moisture ~ Protein, data=training)
M2 = lm(Moisture ~ Protein+I(Protein^2), data=training)
M3 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3), data=training)
M4 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3)+I(Protein^4), data=training)
M5 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3)+I(Protein^4)+I(Protein^5), data=training)
M6 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3)+I(Protein^4)+I(Protein^5)+I(Protein^6), data=training)
# Make the predictions with the given models
fitted_validation1 = predict(M1, validation)
fitted_validation2 = predict(M2, validation)
fitted_validation3 = predict(M3, validation)
fitted_validation4 = predict(M4, validation)
fitted_validation5 = predict(M5, validation)
fitted_validation6 = predict(M6, validation)
fitted_training1 = predict(M1)
fitted_training2 = predict(M2)
fitted_training3 = predict(M3)
fitted_training4 = predict(M4)
fitted_training5 = predict(M5)
fitted_training6 = predict(M6)
# Calculate the MSEs
# Validation MSEs
mse_v1 = mean((validation$Moisture-fitted_validation1)^2)
mse_v2 = mean((validation$Moisture-fitted_validation2)^2)
mse_v3 = mean((validation$Moisture-fitted_validation3)^2)
mse_v4 = mean((validation$Moisture-fitted_validation4)^2)
mse_v5 = mean((validation$Moisture-fitted_validation5)^2)
mse_v6 = mean((validation$Moisture-fitted_validation6)^2)
mse_v = c(mse_v1, mse_v2, mse_v3, mse_v4, mse_v5, mse_v6)
# Training MSEs
mse_t1 = mean((training$Moisture-fitted_training1)^2)
mse_t2 = mean((training$Moisture-fitted_training2)^2)
mse_t3 = mean((training$Moisture-fitted_training3)^2)
mse_t4 = mean((training$Moisture-fitted_training4)^2)
mse_t5 = mean((training$Moisture-fitted_training5)^2)
mse_t6 = mean((training$Moisture-fitted_training6)^2)
mse_t = c(mse_t1, mse_t2, mse_t3, mse_t4, mse_t5, mse_t6)
# Plot the MSE's of the validation set compared to the training set
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", legend=c("MSE for Validation", "MSE for Training"), col=c("green", "blue"))
library(MASS)
library(glmnet)
# Data
dataframe = read.csv("tecator.csv", dec=',')
setwd("~/TDDE01/Machine-Learning-Labs/Lab 1")
library(MASS)
library(glmnet)
# Data
dataframe = read.csv("tecator.csv", dec=',')
dataframe = dataframe[-215,]
# Task 1 - Plot Protein vs. Moisture
protein = dataframe$Protein
moisture = dataframe$Moisture
plot(protein, moisture) # Plot of protein vs. moisture, linear approximation seems reasonable (normally distributed around a line)
# Task 2
# M1 = w0+w1*p+ε, where ε = N~(0, σ)
# M2 = w0+w1*p+w2*p²+ε, where ε=N~(0, σ)
# M3 = w0+w1*p+w2*p²+w3*p³+ε, where ε=N~(0, σ)
# etc.
# MSE criterion is appropriate to use since it minimizes the errors in our predicions (deviation of ε)
# Task 3 - Models for different polunomial terms of powers
n = dim(dataframe)[1] # number of observations
set.seed(12345)
ids = sample(1:n, floor(n/2))
training = dataframe[ids,] # training data
validation = dataframe[-ids,] # validation (test) data
#M = solve(t(X)%*%X)%*%t(X)%*%Y if I was to calculate it myself, did not work for higher polynomial terms of power in R
## Create the models (Moisture vs. Protein) for the different terms of power
M1 = lm(Moisture ~ Protein, data=training)
M2 = lm(Moisture ~ Protein+I(Protein^2), data=training)
M3 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3), data=training)
M4 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3)+I(Protein^4), data=training)
M5 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3)+I(Protein^4)+I(Protein^5), data=training)
M6 = lm(Moisture ~ Protein+I(Protein^2)+I(Protein^3)+I(Protein^4)+I(Protein^5)+I(Protein^6), data=training)
# Make the predictions with the given models
fitted_validation1 = predict(M1, validation)
fitted_validation2 = predict(M2, validation)
fitted_validation3 = predict(M3, validation)
fitted_validation4 = predict(M4, validation)
fitted_validation5 = predict(M5, validation)
fitted_validation6 = predict(M6, validation)
fitted_training1 = predict(M1)
fitted_training2 = predict(M2)
fitted_training3 = predict(M3)
fitted_training4 = predict(M4)
fitted_training5 = predict(M5)
fitted_training6 = predict(M6)
# Calculate the MSEs
# Validation MSEs
mse_v1 = mean((validation$Moisture-fitted_validation1)^2)
mse_v2 = mean((validation$Moisture-fitted_validation2)^2)
mse_v3 = mean((validation$Moisture-fitted_validation3)^2)
mse_v4 = mean((validation$Moisture-fitted_validation4)^2)
mse_v5 = mean((validation$Moisture-fitted_validation5)^2)
mse_v6 = mean((validation$Moisture-fitted_validation6)^2)
mse_v = c(mse_v1, mse_v2, mse_v3, mse_v4, mse_v5, mse_v6)
# Training MSEs
mse_t1 = mean((training$Moisture-fitted_training1)^2)
mse_t2 = mean((training$Moisture-fitted_training2)^2)
mse_t3 = mean((training$Moisture-fitted_training3)^2)
mse_t4 = mean((training$Moisture-fitted_training4)^2)
mse_t5 = mean((training$Moisture-fitted_training5)^2)
mse_t6 = mean((training$Moisture-fitted_training6)^2)
mse_t = c(mse_t1, mse_t2, mse_t3, mse_t4, mse_t5, mse_t6)
# Plot the MSE's of the validation set compared to the training set
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", legend=c("MSE for Validation", "MSE for Training"), col=c("green", "blue"))
legend("topright", legend=c("MSE for Validation", "MSE for Training"), col=c("green", "blue"))
legend("topright", legend=c("MSE for Validation", "MSE for Training"), col=c("green"))
legend("topright", legend=c("MSE for Validation", "MSE for Training"), col=c("green","red"))
legend("topright", legend=c("MSE for Validation", "MSE for Training"), col=c("green","green"))
legend("topright", legend=c("Validation", "Training"), col=c("green","green"))
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", legend=c("Validation", "Training"), col=c("green","green"))
legend("topright", legend=c("Validation", "Training"), col=c("green","blue"))
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", legend=c("Validation", "Training"), col=c("green","blue"))
legend("Topright", legend=c("Validation", "Training"), col=c("green","blue"))
legend("topright", legend=c("Validation", "Training"), col(c("green","blue")))
legend("topright", legend=c("Validation", "Training"), col=c("green","green"))
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", legend=c("Validation", "Training"), col=c("green","blue"))
legend("topright", col=c("green","blue"), legend=c("Validation", "Training"))
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
legend("topright", col=c("green","blue"), legend=c("Validation", "Training"))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", col=c("green","bluf"), legend=c("Validation", "Training"))
legend("topright", col=c("green","bluf"), legend=c("Validation", "Training"))
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", col=c("green","blue"), legend=c("Validation", "Training"))
legend("topright", col=c("green"), legend=c("Validation", "Training"))
plot(1:6, mse_v, type="l", col="green", ylim=c(20,45))
lines(1:6, mse_t, type="l", col="blue")
legend("topright", col=c("green"), legend=c("Validation", "Training"))
legend("topright", col=c("green","blue","red"), legend=c("Validation", "Training"))

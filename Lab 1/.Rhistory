}
ROC(test[,49], matrix(0.5, nrow=n/2, ncol=1), Prob_k5)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
print(m)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(dim(t))
TPR[i]=1
print(TPR)
#FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
#  return (list(TPR=TPR,FPR=FPR))
}
ROC(test[,49], matrix(0.5, nrow=n/2, ncol=1), Prob_k5)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(dim(t))
TPR[i]=1
print(TPR)
#FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
#  return (list(TPR=TPR,FPR=FPR))
}
ROC(test[,49], matrix(0.5, nrow=n/2, ncol=1), Prob_k5)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(dim(t))
TPR[i]=1
print(TPR[i])
#FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
#  return (list(TPR=TPR,FPR=FPR))
}
ROC(test[,49], matrix(0.5, nrow=n/2, ncol=1), Prob_k5)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(dim(t))
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
print(TPR[i])
#FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
#  return (list(TPR=TPR,FPR=FPR))
}
ROC(test[,49], matrix(0.5, nrow=n/2, ncol=1), Prob_k5)
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=20)
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
p
ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
print(TPR[i])
print(FPR[i])
}
#  return (list(TPR=TPR,FPR=FPR))
}
ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
print(TPR[i])
print(FPR[i])
}
return (list(TPR=TPR,FPR=FPR))
}
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
ROC(test[,49], Prob_k5, p)
list_trp_fpr_k5 = ROC(test[,49], Prob_k5, p)
list_trp_fpr_k5 = ROC(test[,49], Prob_k5, p)
plot(list_tpr_fpr_k5(FPR), list_tpr_fpr_k5(TPR))
list_tpr_fpr_k5 = ROC(test[,49], Prob_k5, p)
plot(list_tpr_fpr_k5(FPR), list_tpr_fpr_k5(TPR))
list_k5 = ROC(test[,49], Prob_k5, p)
plot(list_k5)
list_k5 = ROC(test[,49], Prob_k5, p)
plot(list_k5(TPR), list_k5(FPR))
plot(unlist(list_k5))
list_k5 = ROC(test[,49], Prob_k5, p)
plot(unlist(list_k5(FPR)), unlist(list_k5(TPR)))
plot(unlist(list_k5)[1])
plot(unlist(list_k5)[1], unlist(list_k5)[2])
plot(unlist(list_k5)[1], unlist(list_k5)[2])
plot(list[1], list[2])
plot(list(TPR), list(FPR))
plot(unlist(list[TPR]), unlist(list[FPR]))
plot(unlist(list(TPR), unlist(list[FPR]))
plot(unlist(list(TPR), unlist(list(FPR)))
list = ROC(test[,49], Prob_k5, p)
plot(unlist(list(TPR), unlist(list(FPR))
list = ROC(test[,49], Prob_k5, p)
plot(unlist(list(), unlist(list(FPR))
list = ROC(test[,49], Prob_k5, p)
install.packages("kknn")
plot(list[[TPR]], list[[FPR]])
library(kknn)
library("irlba", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("magrittr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:magrittr", unload=TRUE)
detach("package:irlba", unload=TRUE)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
list = ROC(test[,49], Prob_k5, p)
plot(list[[TPR]], list[[FPR]])
plot(list[[1]], list[[2]])
list
plot(list[[$TPR]], list[[$FPR]])
list = ROC(test[,49], Prob_k5, p)
plot(list[$TPR], list[$FPR])
plot(list[TPR], list[FPR])
plot(as.numeric(list))
plot(as.numeric(list))
as.numeric(list)
list = ROC(test[,49], Prob_k5, p)
as.numeric(list)
as.array(list)
plot(as.array(list)[1])
plot(as.array(list)[1], as.array(list)[2])
as.array(list)
plot(as.array(list)[1], as.array(list)[2])
as.array(list)
plot(as.array(list)[TPR], as.array(list)[FPR])
as.array(list)
plot(as.array(list)[$TPR], as.array(list)[$FPR])
as.vector(list)
as.vector(list)
plot(as.vector(list)[1], as.vector(list)[2])
plot(as.vector(list)[TPR], as.vector(list)[FPR])
print(dim(as.vector(list)))
as.vector(list)
print(dim(as.vector(list)))
as.vector(list).TPR
as.vector(list)[TPR]
as.vector(list)$TPR
plot(as.vector(list)$TPR, as.vector(list)$FPR)
print(dim(as.vector(list)))
print(dim(as.vector(list)$TPR))
print(as.vector(list)$TPR)
print(as.vector(list)$TPR[1])
plot(as.vector(list)$TPR, as.vector(list)$FPR)
plot(as.vector(list)$TPR, as.vector(list)$FPR)
plot(as.vector(list)$TPR, as.vector(list)$FPR, type="l")
plot(as.vector(list)$TPR, as.vector(list)$FPR, xlim=c(0,1), ylim=c(0,1))
plot(as.vector(list)$TPR, as.vector(list)$FPR, xlim=c(0,1), ylim=c(0,1))
plot(as.vector(list)$FPR, as.vector(list)$TPR, xlim=c(0,1), ylim=c(0,1))
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
print(p[i])
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
print(p[i])
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
list = ROC(test[,49], Prob_k5, p)
t=table(Yfit>p[i], Y)
list = ROC(test[,49], Prob_k5, p)
print(as.vector(list)$TPR[1])
print(as.vector(list)$TPR)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
list = ROC(test[,49], Prob_k5, p)
print(as.vector(list)$TPR[1])
print(as.vector(list)$TPR)
print(test[,49].length)
print(test[,49].size())
print(test[,49].size
print(length(Y))
print(length(test[,49]))
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
Pred = numeric(length(y))
for(j in 1:(n/2)){
if(Yfit[j]>p[j]){
Pred[j]=1
}
}
t=table(Pred, Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
Pred = numeric(length(Y))
for(j in 1:(n/2)){
if(Yfit[j]>p[j]){
Pred[j]=1
}
}
t=table(Pred, Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
Pred = numeric(length(Y))
for(j in 1:(n/2)){
if(Yfit[j]>p[i]){
Pred[j]=1
}
}
t=table(Pred, Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.05, to=0.95, by=0.05), nrow=1, ncol=19)
list = ROC(test[,49], Prob_k5, p)
print(as.vector(list)$TPR)
plot(as.vector(list)$FPR, as.vector(list)$TPR, xlim=c(0,1), ylim=c(0,1))
p = matrix(seq(from=0.01, to=0.99, by=0.01), nrow=1, ncol=99)
list = ROC(test[,49], Prob_k5, p)
print(as.vector(list)$TPR)
plot(as.vector(list)$FPR, as.vector(list)$TPR, xlim=c(0,1), ylim=c(0,1))
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
print(p)
Pred = numeric(length(Y))
for(j in 1:(n/2)){
if(Yfit[j]>p[i]){
Pred[j]=1
}
}
t=table(Pred, Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
print(p[i])
Pred = numeric(length(Y))
for(j in 1:(n/2)){
if(Yfit[j]>p[i]){
Pred[j]=1
}
}
t=table(Pred, Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
p = matrix(seq(from=0.01, to=0.99, by=0.01), nrow=1, ncol=99)
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
print(Yfit)
for(i in 1:m){
t=table(Yfit>p[i], Y)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(t)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
list = ROC(test[,49], Prob_k5, p)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
print(Y)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(t)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
list = ROC(test[,49], Prob_k5, p)
install.packages("kknn", dependencies = FALSE)
install.packages("igraph", dependencies = FALSE)
# Print the ROC curve
ROC = function(Y, Yfit, p){
m=length(p)
TPR=numeric(m)
FPR=numeric(m)
print(Y)
for(i in 1:m){
t=table(Yfit>p[i], Y)
print(t)
TPR[i]=t[1,1]/(t[1,1]+t[1,2])
FPR[i]=t[2,2]/(t[2,1]+t[2,2])
}
return (list(TPR=TPR,FPR=FPR))
}
Y = test[,49]
Yfit = Prob_k5
p = matrix(seq(from=0.01, to=0.99, by=0.01), nrow=1, ncol=99)
list = ROC(Y, Yfit, p)
list = ROC(Y, Yfit, p)
print(as.vector(list)$TPR)
Prob_k5 = knearest(train, 15, test)
Y = test[,49]
Yfit = Prob_k5
p = matrix(seq(from=0.01, to=0.99, by=0.01), nrow=1, ncol=99)
list = ROC(Y, Yfit, p)
Prob_k5 = knearest(train, 1, test)
Prob_k5 = knearest(train, 10, test)
list = ROC(Y, Yfit, p)
Prob_k5 = knearest(train, 5, test)
list = ROC(Y, Yfit, p)
# Main program
dataframe = read.csv("spambase.csv", dec=',')
n = dim(dataframe)[1]
set.seed(12345)
id=sample(1:n, floor(n/2))
train = dataframe[id,]
test = dataframe[-id,]
# k=5
Prob_k5 = knearest(train, 5, test)
Pred_k5 = numeric(n/2)
for(i in 1:(n/2)){
if(Prob_k5[i]>0.5){
Pred_k5[i]=1
}
}
# k=1
Prob_k1 = knearest(train, 1, test)
Pred_k1 = numeric(n/2)
for(i in 1:(n/2)){
if(Prob_k1[i]>0.5){
Pred_k1[i]=1
}
}
#confusion matrixes
cm_k5 = table(Pred_k5, test[,49])
cm_k1 = table(Pred_k1, test[,49])
#missclassification rate
mcr_k5 = 1-sum(diag(cm_k5)/sum(cm_k5))
mcr_k1 = 1-sum(diag(cm_k1)/sum(cm_k1))
Y = test[,49]
Yfit = Prob_k5
p = matrix(seq(from=0.01, to=0.99, by=0.01), nrow=1, ncol=99)
list = ROC(Y, Yfit, p)
print(as.vector(list)$TPR)
plot(as.vector(list)$FPR, as.vector(list)$TPR, xlim=c(0,1), ylim=c(0,1))
# Main program
dataframe = read.csv("spambase.csv", dec=',')
n = dim(dataframe)[1]
set.seed(12345)
id=sample(1:n, floor(n/2))
train = dataframe[id,]
test = dataframe[-id,]
Y = test[,49]
# Prob
Prob_k5 = knearest(train, 5, test)
Prob_k1 = knearest(train, 1, test)
#confusion matrixes
cm_k5 = table(Prob_k5<0.5, Y)
cm_k1 = table(Pred_k1<0.5, Y)
#missclassification rate
mcr_k5 = 1-sum(diag(cm_k5)/sum(cm_k5))
mcr_k1 = 1-sum(diag(cm_k1)/sum(cm_k1))
# ROC and sensitivty
Yfit = Prob_k5
p = matrix(seq(from=0.01, to=0.99, by=0.01), nrow=1, ncol=99)
list = ROC(Y, Yfit, p)
print(as.vector(list)$TPR)
plot(as.vector(list)$FPR, as.vector(list)$TPR, xlim=c(0,1), ylim=c(0,1))
mcr_k5
cm_k5 = table(Prob_k5>0.5, Y)
cm_k1 = table(Pred_k1>0.5, Y)
#missclassification rate
mcr_k5 = 1-sum(diag(cm_k5)/sum(cm_k5))
mcr_k1 = 1-sum(diag(cm_k1)/sum(cm_k1))
mcr_k5
